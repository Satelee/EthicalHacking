## 191. Sets ##
# unordered collection of unique objects

# only returns unique items (duplicates won't be printed)
my_set = {1,2,3,4,5}

# adding a value to a set
my_set.add(100)
my_set.add(2)   # this won't print as there is already a 2 in the set

# have to grab by the item, not the index

# check to see if a number is in a set
print(1 in my_set)

# length of set
print(len(my_set))

# copy set
new_set = my_set.copy()

# clear a set
my_set.clear()

print(new_set)
print(my_set)

# convert into list
set2 = {5,4,3,2,1}
print(list(set2))

# creating a list that won't print duplicates 
my_list = [1,2,3,4,5,5]
print(set(my_list))

## 192. Sets 2 ##

our_set = {1,2,3,4,5}
your_set = {4,5,6,7,8,9,10}

# comparing 2 sets - it finds the difference from 'our set' to 'your set' (duplicates get ignored)
print(our_set.difference(your_set))

# removes an element from a set
our_set.discard(5)
print(our_set)

# update a set to remove the differences from another set
difference1 = {1,2,3,4,5}
difference2 = {4,5,6,7,8}

difference1.difference_update(difference2)
print(difference1)

# finds the intersection (same numbers) within 2 sets
print(our_set.intersection(your_set))
# another way to do this:
    # print(our_set & your_set)

# checks to see if either set has anything in common
    # prints true if they have nothing in common
    # prints false if they do have something in common
print(our_set.isdisjoint(your_set))

# 'unites' two sets together and removes any duplicates
print(our_set.union(your_set))
# another way to do this:
    # print(our_set | your_set)

# checks to see if one full set lies within another set (sub-set)
a_set = {4,5}
b_set = {4,5,6,7,8,9}

print(a_set.issubset(b_set))

# checks to see if a set encompasses any other sets (super set)
print(b_set.issuperset(a_set))

# set methods: https://www.w3schools.com/python/python_ref_set.asp 

######################################

## Sets Exercise ##

# You are working for the school Principal. We have a database of school students:
school = {'Bobby','Tammy','Jammy','Sally','Danny'}

#during class, the teachers take attendance and compile it into a list. 
attendance_list = ['Jammy', 'Bobby', 'Danny', 'Sally']

# using what you learned about sets, create a piece of code that the school principal can use to immediately find out who missed class so they can call the parents. 
# (Imagine if the list had 1000s of students. The principal can use the lists generated by the teachers + the school database to use python and make his/her job easier):
#  Find the students that miss class!

print(school.difference(attendance_list))   # don't have to convert list into set, does it automatically.